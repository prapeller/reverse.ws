#!/usr/bin/env bash

set -o errexit
set -o pipefail
set -o nounset

working_dir="$(dirname ${0})"
source "${working_dir}/_sourced/constants.sh"
source "${working_dir}/_sourced/messages.sh"

if [[ -z ${1+x} ]]; then
   message_error "Backup filename is not specified yet it is a required parameter.
   Make sure you provide one and try again."
   exit 1
fi

backup_filename="${BACKUP_DIR_PATH}/${1}"
if [[ ! -f "${backup_filename}" ]]; then
   message_error "No backup with the specified filename found.
   run the following script to check out backups you have >> maintenance.backups"
   exit 1
fi

message_welcome "Restoring the '${DB_NAME}' database from the backup >> '${backup_filename}'"

if [[ "${DB_USER}" == "postgres" ]]; then
   message_error "Restoring as 'postgres' user is not supported. Assign 'DB_USER' env with another one and try again."
   exit 1
fi

export PGHOST="${DB_HOST}"
export PGPORT="${DB_PORT}"
export PGUSER="${DB_USER}"
export PGPASSWORD="${DB_PASSWORD}"
export PGDATABASE="${DB_NAME}"

message_info "Dropping the database..."
dropdb "${PGDATABASE}"

message_info "Creating a new database..."
createdb --owner="${DB_USER}"

message_info "Applying the backup to the new database..."
gunzip -c "${backup_filename}" | psql "${DB_NAME}"

message_success "Restored the database >> '${DB_NAME}' from the backup >> '${backup_filename}'"